name: 🧪 Test GitFlow Action

on:
  workflow_dispatch:
    inputs:
      test-version:
        description: 'Version à tester'
        required: true
        default: 'v1.0.1-test'
      test-type:
        description: 'Type de test'
        required: false
        default: 'manual'
        type: choice
        options:
          - manual
          - auto
          - branch
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-basic:
    name: 🧪 Test Formats de Version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: 
          - 'v1.0.1-test'
          - 'v2.0.0-alpha'
          - 'v1.5.0-beta.1'
          - '1.0.0'
          - 'v1.0.0'
          - 'auto'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Créer environnement de test
        run: |
          # Créer un package.json de test
          cat > package.json << 'EOF'
          {
            "name": "test-gitflow-action",
            "version": "1.0.0",
            "description": "Test pour l'action GitFlow",
            "scripts": {
              "test": "echo 'Test passed'",
              "build": "echo 'Build completed'",
              "lint": "echo 'Linting completed'"
            }
          }
          EOF
          
          # Créer un changelog de test
          cat > CHANGELOG.md << 'EOF'
          # Changelog
          
          ## [Unreleased]
          
          ### Added
          - Test setup
          
          ## [1.0.0] - 2025-01-01
          
          ### Added
          - Initial release
          EOF

      - name: 🧪 Test Action (Mode Dry-Run)
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ github.event.inputs.test-version || 'v1.0.1-test' }}
          project-name: 'Test GitFlow Action'
          run-tests: 'true'
          commit-changes: 'false'  # Important: pas de commit en test
          format-code: 'false'
          generate-docs: 'false'
        id: test-action

      - name: 📊 Résultats du Test
        run: |
          echo "## 🧪 Résultats du Test" >> $GITHUB_STEP_SUMMARY
          echo "- **Version détectée:** ${{ steps.test-action.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changelog mis à jour:** ${{ steps.test-action.outputs.changelog-updated }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ steps.test-action.outputs.version-code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changements commités:** ${{ steps.test-action.outputs.changes-committed }}" >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Vérifier les modifications
        run: |
          echo "=== Contenu du package.json après test ==="
          cat package.json
          
          echo "=== Début du CHANGELOG.md modifié ==="
          head -n 20 CHANGELOG.md
          
          echo "=== Statut Git ==="
          git status --porcelain

  validate-structure:
    name: 🔍 Validation Structure
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔍 Vérifier la structure de l'action
        run: |
          echo "=== Vérification de la structure ==="
          
          # Vérifier action.yml
          if [ -f action.yml ]; then
            echo "✅ action.yml présent"
          else
            echo "❌ action.yml manquant"
            exit 1
          fi
          
          # Vérifier le dossier scripts
          if [ -d scripts ]; then
            echo "✅ Dossier scripts présent"
          else
            echo "❌ Dossier scripts manquant"
            exit 1
          fi
          
          # Vérifier les scripts individuels
          required_scripts=("detect-version.sh" "update-versions.sh" "generate-changelog.sh" "commit-changes.sh")
          for script in "${required_scripts[@]}"; do
            if [ -f "scripts/$script" ]; then
              echo "✅ $script présent"
              if [ -x "scripts/$script" ]; then
                echo "✅ $script est exécutable"
              else
                echo "❌ $script n'est pas exécutable"
                exit 1
              fi
            else
              echo "❌ $script manquant"
              exit 1
            fi
          done
          
          echo "🎉 Structure validée avec succès !"

  test-different-versions:
    name: 🧪 Test Différents Types de Version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version-type: ['auto', 'manual']
        include:
          - version-type: 'auto'
            version: 'auto'
          - version-type: 'manual'
            version: 'v2.1.0-test'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup pour test ${{ matrix.version-type }}
        run: |
          cat > package.json << 'EOF'
          {
            "name": "test-versions",
            "version": "1.5.0",
            "description": "Test versions",
            "scripts": {
              "test": "echo 'Test passed'"
            }
          }
          EOF
          
          cat > CHANGELOG.md << 'EOF'
          # Changelog
          
          ## [Unreleased]
          
          ## [1.5.0] - 2025-01-01
          ### Added
          - Version testing
          EOF

      - name: 🧪 Test version ${{ matrix.version-type }}
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ matrix.version }}
          project-name: 'Test ${{ matrix.version-type }}'
          run-tests: 'false'
          commit-changes: 'false'
          format-code: 'false'
          generate-docs: 'false'
        id: test-version

      - name: 📊 Résultats ${{ matrix.version-type }}
        run: |
          echo "### Test ${{ matrix.version-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.test-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changelog:** ${{ steps.test-version.outputs.changelog-updated }}" >> $GITHUB_STEP_SUMMARY