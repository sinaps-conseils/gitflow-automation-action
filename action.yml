name: 'GitFlow Automation'
description: 'Automatise le workflow GitFlow avec g√©n√©ration de changelog et gestion des versions'
author: 'Quentin NCL - SINAPS Conseils'

inputs:
  github-token:
    description: 'GitHub token pour les op√©rations Git et API'
    required: true
  version:
    description: 'Version √† cr√©er (format vX.Y.Z). Si non sp√©cifi√©e, sera calcul√©e automatiquement.'
    required: false
    default: ''
  node-version:
    description: 'Version de Node.js √† utiliser'
    required: false
    default: '18'
  project-name:
    description: 'Nom du projet pour les messages du changelog'
    required: false
    default: 'Project'
  run-tests:
    description: 'Ex√©cuter les tests apr√®s la pr√©paration'
    required: false
    default: 'true'
  format-code:
    description: 'Formater le code automatiquement'
    required: false
    default: 'true'
  generate-docs:
    description: 'G√©n√©rer la documentation automatiquement'
    required: false
    default: 'true'
  commit-changes:
    description: 'Commiter automatiquement les changements'
    required: false
    default: 'true'

outputs:
  version:
    description: 'Version cr√©√©e ou utilis√©e'
    value: ${{ steps.detect-version.outputs.version }}
  changelog-updated:
    description: 'Indique si le changelog a √©t√© mis √† jour'
    value: ${{ steps.generate-changelog.outputs.updated }}
  changes-committed:
    description: 'Indique si des changements ont √©t√© commit√©s'
    value: ${{ steps.commit-changes.outputs.committed }}
  version-code:
    description: 'Nouveau versionCode (pour React Native/Expo)'
    value: ${{ steps.update-versions.outputs.version-code }}

runs:
  using: 'composite'
  steps:
    - name: üîç Detect or validate version
      id: detect-version
      shell: bash
      run: ${{ github.action_path }}/scripts/detect-version.sh
      env:
        INPUT_VERSION: ${{ inputs.version }}
        PROJECT_NAME: ${{ inputs.project-name }}

    - name: üîÑ Update versions in files
      id: update-versions
      shell: bash
      run: ${{ github.action_path }}/scripts/update-versions.sh
      env:
        VERSION: ${{ steps.detect-version.outputs.version }}

    - name: üìù Generate changelog
      id: generate-changelog
      shell: bash
      run: ${{ github.action_path }}/scripts/generate-changelog.sh "" "" "${{ steps.detect-version.outputs.version }}"
      env:
        PROJECT_NAME: ${{ inputs.project-name }}

    # === NOUVELLE √âTAPE : Setup Node.js et installation des d√©pendances ===
    - name: üîß Setup Node.js
      if: inputs.run-tests == 'true' || inputs.format-code == 'true' || inputs.generate-docs == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'

    - name: üì¶ Install dependencies
      if: inputs.run-tests == 'true' || inputs.format-code == 'true' || inputs.generate-docs == 'true'
      shell: bash
      run: |
        if [ -f package-lock.json ]; then
          npm ci --legacy-peer-deps
        else
          npm install --legacy-peer-deps
        fi

    - name: üß™ Run tests
      if: inputs.run-tests == 'true'
      shell: bash
      run: |
        if npm run test --silent 2>/dev/null; then
          npm test
        else
          echo "‚ö†Ô∏è Test script not found in package.json, skipping tests"
        fi
      continue-on-error: false

    - name: üé® Format code
      if: inputs.format-code == 'true'
      shell: bash
      run: |
        if npm run format --silent 2>/dev/null; then
          npm run format
        else
          echo "‚ö†Ô∏è Format script not found in package.json, skipping formatting"
        fi
      continue-on-error: true

    - name: üìö Generate documentation
      if: inputs.generate-docs == 'true'
      shell: bash
      run: |
        if npm run doc --silent 2>/dev/null; then
          npm run doc
        else
          echo "‚ö†Ô∏è Doc script not found in package.json, skipping documentation"
        fi
      continue-on-error: true

    - name: üíæ Commit changes
      if: inputs.commit-changes == 'true'
      id: commit-changes
      shell: bash
      run: ${{ github.action_path }}/scripts/commit-changes.sh
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        VERSION: ${{ steps.detect-version.outputs.version }}
        GITHUB_ACTOR: ${{ github.actor }}

branding:
  icon: 'git-branch'
  color: 'blue'