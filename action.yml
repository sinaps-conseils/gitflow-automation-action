name: 'GitFlow Automation'
description: 'Automatise le workflow GitFlow avec génération de changelog et gestion des versions'
author: 'Quentin NCL - SINAPS Conseils'

inputs:
  github-token:
    description: 'GitHub token pour les opérations Git et API'
    required: true
  version:
    description: 'Version à créer (format vX.Y.Z). Si non spécifiée, sera calculée automatiquement.'
    required: false
    default: ''
  node-version:
    description: 'Version de Node.js à utiliser'
    required: false
    default: '18'
  project-name:
    description: 'Nom du projet pour les messages du changelog'
    required: false
    default: 'Project'
  run-tests:
    description: 'Exécuter les tests après la préparation'
    required: false
    default: 'true'
  format-code:
    description: 'Formater le code automatiquement'
    required: false
    default: 'true'
  generate-docs:
    description: 'Générer la documentation automatiquement'
    required: false
    default: 'true'
  commit-changes:
    description: 'Commiter automatiquement les changements'
    required: false
    default: 'true'

outputs:
  version:
    description: 'Version créée ou utilisée'
    value: ${{ steps.detect-version.outputs.version }}
  changelog-updated:
    description: 'Indique si le changelog a été mis à jour'
    value: ${{ steps.generate-changelog.outputs.updated }}
  changes-committed:
    description: 'Indique si des changements ont été commités'
    value: ${{ steps.commit-changes.outputs.committed }}
  version-code:
    description: 'Nouveau versionCode (pour React Native/Expo)'
    value: ${{ steps.update-versions.outputs.version-code }}

runs:
  using: 'composite'
  steps:
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: 📦 Install dependencies
      shell: bash
      run: npm ci --legacy-peer-deps
      
    - name: 🔍 Detect or validate version
      id: detect-version
      shell: bash
      run: ${{ github.action_path }}/scripts/detect-version.sh
      env:
        INPUT_VERSION: ${{ inputs.version }}
        PROJECT_NAME: ${{ inputs.project-name }}

    - name: 🔄 Update versions in files
      id: update-versions
      shell: bash
      run: ${{ github.action_path }}/scripts/update-versions.sh
      env:
        VERSION: ${{ steps.detect-version.outputs.version }}

    - name: 📝 Generate changelog
      id: generate-changelog
      shell: bash
      run: ${{ github.action_path }}/scripts/generate-changelog.sh "" "" "${{ steps.detect-version.outputs.version }}"
      env:
        PROJECT_NAME: ${{ inputs.project-name }}

    - name: 🧪 Run tests
      if: inputs.run-tests == 'true'
      shell: bash
      run: npm test
      continue-on-error: false

    - name: 🎨 Format code
      if: inputs.format-code == 'true'
      shell: bash
      run: npm run format || echo "⚠️ Format script not found"
      continue-on-error: true

    - name: 📚 Generate documentation
      if: inputs.generate-docs == 'true'
      shell: bash
      run: npm run doc || echo "⚠️ Doc script not found"
      continue-on-error: true

    - name: 💾 Commit changes
      if: inputs.commit-changes == 'true'
      id: commit-changes
      shell: bash
      run: ${{ github.action_path }}/scripts/commit-changes.sh
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        VERSION: ${{ steps.detect-version.outputs.version }}
        GITHUB_ACTOR: ${{ github.actor }}

branding:
  icon: 'git-branch'
  color: 'blue'
